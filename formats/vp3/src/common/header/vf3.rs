use byteorder::BigEndian;

use embroidery_lib::prelude::*;
use embroidery_lib::read_int;

use std::io::Read;

use crate::common::util::{read_short_ascii_string_field, read_wide_string_field};

#[derive(Debug, PartialEq)]
pub struct Vf3Header {
    pub font_name: String,
    pub character_list: String,
    pub font_size_mm: u16,
    pub font_italic: bool,
    pub font_bold: bool,
    pub font_bounding_width: u16,
    pub font_bounding_height: u16,
    pub character_offsets: Vec<(char, u32)>,
}

// #[derive(Debug, PartialEq)]
// pub struct Vf3Hoop {
//     pub right: i32,
//     pub bottom: i32,
//     pub left: i32,
//     pub top: i32,
//     pub font_bounding_width: u32,
//     pub font_bounding_height: u16,
//     pub bytes_remaining: usize,
//     pub x_offset: i32,
//     pub y_offset: i32,

//     /* Centered hoop dimensions */
//     pub right2: i32,
//     pub left2: i32,
//     pub bottom2: i32,
//     pub top2: i32,

//     pub width: i32,
//     pub height: i32,
// }

pub fn read_font_header(mut reader: &mut dyn Read) -> Result<Vf3Header, ReadError> {
    let font_name = read_wide_string_field(&mut reader, "font_name")?;
    // Character lists are defined here:
    //  https://www.premierplusembroidery.com/onlineHelp/PremierPlus2/Windows/Embroidery/index.html#page/PP2W_Embroidery%2FPP2W%2520QF%252020%2520Using.20.03.html%23
    let character_list: String = read_short_ascii_string_field(&mut reader, "character_encoding")?;

    let font_size_mm = read_int!(reader, u16, BigEndian)?;
    let font_style = read_int!(reader, u8)?;
    if font_style | 0x03 != 0x03 {
        return Err(ReadError::invalid_format(format!(
            "Font style contained unexpectedly set bits. Expecting only 0x01 & 0x02 to be set, got: 0x{:X}",
            font_style
        )));
    }
    let font_italic = font_style & 0x02 == 0x02;
    let font_bold = font_style & 0x01 == 0x01;

    // These are different, even for identical generation settings.
    // It could be a timestamp, or something else.
    let mut unknown_random_bytes = [0u8; 16];
    reader.read_exact(&mut unknown_random_bytes)?;

    let font_bounding_width = read_int!(reader, u16, BigEndian)?;
    let font_bounding_height = read_int!(reader, u16, BigEndian)?;

    let character_offsets = read_character_offsets(reader)?;

    Ok(Vf3Header {
        font_name,
        character_list,
        character_offsets,
        font_size_mm,
        font_italic,
        font_bold,
        font_bounding_width,
        font_bounding_height,
    })
}

pub fn read_character_offsets(reader: &mut dyn Read) -> std::result::Result<std::vec::Vec<(char, u32)>, ReadError> {
    let character_count: usize = read_int!(reader, u16, BigEndian)?.into();
    let mut character_offsets = vec![('\0', 0); character_count];
    for (character, offset) in character_offsets.iter_mut() {
        let char_code = read_int!(reader, u16, BigEndian)?;
        *character = std::char::from_u32(char_code.into()).ok_or_else(|| {
            ReadError::invalid_format(format!(
                "Unable to convert character code 0x{:X} into a Unicode character",
                char_code
            ))
        })?;
        *offset = read_int!(reader, u32, BigEndian)?;
    }
    Ok(character_offsets)
}

#[cfg(test)]
#[allow(dead_code)]
mod test_super {
    use super::*;

    #[test]
    fn test_read_character_offsets_western_1() {
        // Send.vf3  StartOffset(h): 0000007F, EndOffset(h): 000002CC, Length(h): 0000024E
        let data: [u8; 0x24E] = [
            0x00, 0x62, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x88, 0x00, 0x26, 0x00, 0x00,
            0x01, 0xC9, 0x00, 0x2C, 0x00, 0x00, 0x03, 0x80, 0x00, 0x2D, 0x00, 0x00, 0x04, 0x93, 0x00, 0x2E, 0x00, 0x00,
            0x05, 0xA2, 0x00, 0x30, 0x00, 0x00, 0x06, 0xA1, 0x00, 0x31, 0x00, 0x00, 0x08, 0x04, 0x00, 0x32, 0x00, 0x00,
            0x09, 0x53, 0x00, 0x33, 0x00, 0x00, 0x0A, 0xAE, 0x00, 0x34, 0x00, 0x00, 0x0B, 0xFB, 0x00, 0x35, 0x00, 0x00,
            0x0D, 0x74, 0x00, 0x36, 0x00, 0x00, 0x0E, 0xC3, 0x00, 0x37, 0x00, 0x00, 0x10, 0x2E, 0x00, 0x38, 0x00, 0x00,
            0x11, 0x93, 0x00, 0x39, 0x00, 0x00, 0x13, 0x16, 0x00, 0x3C, 0x00, 0x00, 0x14, 0x7F, 0x00, 0x3F, 0x00, 0x00,
            0x15, 0x07, 0x00, 0x40, 0x00, 0x00, 0x16, 0x50, 0x00, 0x41, 0x00, 0x00, 0x18, 0x57, 0x00, 0x42, 0x00, 0x00,
            0x19, 0xE6, 0x00, 0x43, 0x00, 0x00, 0x1B, 0xAD, 0x00, 0x44, 0x00, 0x00, 0x1D, 0x12, 0x00, 0x45, 0x00, 0x00,
            0x1E, 0xB3, 0x00, 0x46, 0x00, 0x00, 0x20, 0x78, 0x00, 0x47, 0x00, 0x00, 0x22, 0x1B, 0x00, 0x48, 0x00, 0x00,
            0x23, 0x9A, 0x00, 0x49, 0x00, 0x00, 0x25, 0x83, 0x00, 0x4A, 0x00, 0x00, 0x26, 0xEE, 0x00, 0x4B, 0x00, 0x00,
            0x28, 0x49, 0x00, 0x4C, 0x00, 0x00, 0x2A, 0x0E, 0x00, 0x4D, 0x00, 0x00, 0x2B, 0x89, 0x00, 0x4E, 0x00, 0x00,
            0x2D, 0xAC, 0x00, 0x4F, 0x00, 0x00, 0x2F, 0x6B, 0x00, 0x50, 0x00, 0x00, 0x30, 0xE0, 0x00, 0x51, 0x00, 0x00,
            0x32, 0x6D, 0x00, 0x52, 0x00, 0x00, 0x33, 0xF8, 0x00, 0x53, 0x00, 0x00, 0x35, 0xA3, 0x00, 0x54, 0x00, 0x00,
            0x37, 0x12, 0x00, 0x55, 0x00, 0x00, 0x38, 0xA3, 0x00, 0x56, 0x00, 0x00, 0x3A, 0x2E, 0x00, 0x57, 0x00, 0x00,
            0x3B, 0xA7, 0x00, 0x58, 0x00, 0x00, 0x3D, 0x96, 0x00, 0x59, 0x00, 0x00, 0x3F, 0x3B, 0x00, 0x5A, 0x00, 0x00,
            0x40, 0xB8, 0x00, 0x61, 0x00, 0x00, 0x42, 0x45, 0x00, 0x62, 0x00, 0x00, 0x43, 0xAA, 0x00, 0x63, 0x00, 0x00,
            0x45, 0x25, 0x00, 0x64, 0x00, 0x00, 0x46, 0x5E, 0x00, 0x65, 0x00, 0x00, 0x47, 0xE5, 0x00, 0x66, 0x00, 0x00,
            0x49, 0x42, 0x00, 0x67, 0x00, 0x00, 0x4A, 0xA5, 0x00, 0x68, 0x00, 0x00, 0x4C, 0x42, 0x00, 0x69, 0x00, 0x00,
            0x4D, 0xCB, 0x00, 0x6A, 0x00, 0x00, 0x4F, 0x22, 0x00, 0x6B, 0x00, 0x00, 0x50, 0x87, 0x00, 0x6C, 0x00, 0x00,
            0x52, 0x14, 0x00, 0x6D, 0x00, 0x00, 0x53, 0x61, 0x00, 0x6E, 0x00, 0x00, 0x55, 0x12, 0x00, 0x6F, 0x00, 0x00,
            0x56, 0x81, 0x00, 0x70, 0x00, 0x00, 0x57, 0xD0, 0x00, 0x71, 0x00, 0x00, 0x59, 0x59, 0x00, 0x72, 0x00, 0x00,
            0x5A, 0xE4, 0x00, 0x73, 0x00, 0x00, 0x5C, 0x25, 0x00, 0x74, 0x00, 0x00, 0x5D, 0x70, 0x00, 0x75, 0x00, 0x00,
            0x5E, 0xBB, 0x00, 0x76, 0x00, 0x00, 0x60, 0x1C, 0x00, 0x77, 0x00, 0x00, 0x61, 0x6B, 0x00, 0x78, 0x00, 0x00,
            0x63, 0x04, 0x00, 0x79, 0x00, 0x00, 0x64, 0x6F, 0x00, 0x7A, 0x00, 0x00, 0x65, 0xD8, 0x00, 0xC4, 0x00, 0x00,
            0x67, 0x3B, 0x00, 0xC5, 0x00, 0x00, 0x69, 0x04, 0x00, 0xC6, 0x00, 0x00, 0x6A, 0xD9, 0x00, 0xD1, 0x00, 0x00,
            0x6C, 0xE6, 0x00, 0xD6, 0x00, 0x00, 0x6E, 0xDB, 0x00, 0xD8, 0x00, 0x00, 0x70, 0x8A, 0x00, 0xDC, 0x00, 0x00,
            0x72, 0x3F, 0x00, 0xDF, 0x00, 0x00, 0x74, 0x04, 0x00, 0xE0, 0x00, 0x00, 0x75, 0x89, 0x00, 0xE1, 0x00, 0x00,
            0x77, 0x16, 0x00, 0xE4, 0x00, 0x00, 0x78, 0xA3, 0x00, 0xE5, 0x00, 0x00, 0x7A, 0x42, 0x00, 0xE6, 0x00, 0x00,
            0x7B, 0xEB, 0x00, 0xE7, 0x00, 0x00, 0x7D, 0x90, 0x00, 0xE8, 0x00, 0x00, 0x7F, 0x09, 0x00, 0xE9, 0x00, 0x00,
            0x80, 0x88, 0x00, 0xEA, 0x00, 0x00, 0x82, 0x07, 0x00, 0xEB, 0x00, 0x00, 0x83, 0x94, 0x00, 0xED, 0x00, 0x00,
            0x85, 0x25, 0x00, 0xF1, 0x00, 0x00, 0x86, 0x80, 0x00, 0xF3, 0x00, 0x00, 0x88, 0x25, 0x00, 0xF6, 0x00, 0x00,
            0x89, 0x9C, 0x00, 0xF8, 0x00, 0x00, 0x8B, 0x25, 0x00, 0xF9, 0x00, 0x00, 0x8C, 0xA8, 0x00, 0xFA, 0x00, 0x00,
            0x8E, 0x31, 0x00, 0xFC, 0x00, 0x00, 0x8F, 0xBA, 0x20, 0x19, 0x00, 0x00, 0x91, 0x55,
        ];
        let chars = read_character_offsets(&mut &data[..]).unwrap();
        assert_eq!(
            chars,
            vec![
                (' ', 0),
                ('!', 136),
                ('&', 457),
                (',', 896),
                ('-', 1171),
                ('.', 1442),
                ('0', 1697),
                ('1', 2052),
                ('2', 2387),
                ('3', 2734),
                ('4', 3067),
                ('5', 3444),
                ('6', 3779),
                ('7', 4142),
                ('8', 4499),
                ('9', 4886),
                ('<', 5247),
                ('?', 5383),
                ('@', 5712),
                ('A', 6231),
                ('B', 6630),
                ('C', 7085),
                ('D', 7442),
                ('E', 7859),
                ('F', 8312),
                ('G', 8731),
                ('H', 9114),
                ('I', 9603),
                ('J', 9966),
                ('K', 10313),
                ('L', 10766),
                ('M', 11145),
                ('N', 11692),
                ('O', 12139),
                ('P', 12512),
                ('Q', 12909),
                ('R', 13304),
                ('S', 13731),
                ('T', 14098),
                ('U', 14499),
                ('V', 14894),
                ('W', 15271),
                ('X', 15766),
                ('Y', 16187),
                ('Z', 16568),
                ('a', 16965),
                ('b', 17322),
                ('c', 17701),
                ('d', 18014),
                ('e', 18405),
                ('f', 18754),
                ('g', 19109),
                ('h', 19522),
                ('i', 19915),
                ('j', 20258),
                ('k', 20615),
                ('l', 21012),
                ('m', 21345),
                ('n', 21778),
                ('o', 22145),
                ('p', 22480),
                ('q', 22873),
                ('r', 23268),
                ('s', 23589),
                ('t', 23920),
                ('u', 24251),
                ('v', 24604),
                ('w', 24939),
                ('x', 25348),
                ('y', 25711),
                ('z', 26072),
                ('Ä', 26427),
                ('Å', 26884),
                ('Æ', 27353),
                ('Ñ', 27878),
                ('Ö', 28379),
                ('Ø', 28810),
                ('Ü', 29247),
                ('ß', 29700),
                ('à', 30089),
                ('á', 30486),
                ('ä', 30883),
                ('å', 31298),
                ('æ', 31723),
                ('ç', 32144),
                ('è', 32521),
                ('é', 32904),
                ('ê', 33287),
                ('ë', 33684),
                ('í', 34085),
                ('ñ', 34432),
                ('ó', 34853),
                ('ö', 35228),
                ('ø', 35621),
                ('ù', 36008),
                ('ú', 36401),
                ('ü', 36794),
                ('’', 37205)
            ]
        )
    }

    #[test]
    fn test_read_character_offsets_cyrillic_1() {
        // Microsoft Sans Serif_R_S_C1_10.vf3  StartOffset(h): 0000008A, EndOffset(h): 000002DD, Length(h):
        // 00000254
        let data: [u8; 0x254] = [
            0x00, 0x63, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x88, 0x00, 0x21, 0x00, 0x00,
            0x01, 0x10, 0x00, 0x26, 0x00, 0x00, 0x02, 0xA8, 0x00, 0x30, 0x00, 0x00, 0x05, 0xFC, 0x00, 0x31, 0x00, 0x00,
            0x08, 0x74, 0x00, 0x32, 0x00, 0x00, 0x0A, 0x26, 0x00, 0x33, 0x00, 0x00, 0x0C, 0x7C, 0x00, 0x34, 0x00, 0x00,
            0x0F, 0x26, 0x00, 0x35, 0x00, 0x00, 0x11, 0x56, 0x00, 0x36, 0x00, 0x00, 0x14, 0x08, 0x00, 0x37, 0x00, 0x00,
            0x16, 0xD4, 0x00, 0x38, 0x00, 0x00, 0x18, 0xD4, 0x00, 0x39, 0x00, 0x00, 0x1B, 0xBA, 0x00, 0x3F, 0x00, 0x00,
            0x1E, 0x9C, 0x00, 0x40, 0x00, 0x00, 0x20, 0xB6, 0x00, 0xC6, 0x00, 0x00, 0x25, 0x7A, 0x00, 0xD1, 0x00, 0x00,
            0x28, 0xC6, 0x00, 0xD8, 0x00, 0x00, 0x2B, 0x9A, 0x00, 0xDF, 0x00, 0x00, 0x2E, 0xEA, 0x00, 0xE0, 0x00, 0x00,
            0x32, 0x12, 0x00, 0xE1, 0x00, 0x00, 0x34, 0xD8, 0x00, 0xE6, 0x00, 0x00, 0x37, 0x92, 0x00, 0xE7, 0x00, 0x00,
            0x3B, 0x0A, 0x00, 0xE8, 0x00, 0x00, 0x3D, 0xAC, 0x00, 0xE9, 0x00, 0x00, 0x40, 0x48, 0x00, 0xEA, 0x00, 0x00,
            0x43, 0x14, 0x00, 0xEB, 0x00, 0x00, 0x45, 0xE6, 0x00, 0xED, 0x00, 0x00, 0x48, 0xE8, 0x00, 0xF1, 0x00, 0x00,
            0x4A, 0x5E, 0x00, 0xF3, 0x00, 0x00, 0x4C, 0xF6, 0x00, 0xF8, 0x00, 0x00, 0x4F, 0x54, 0x00, 0xF9, 0x00, 0x00,
            0x52, 0x34, 0x00, 0xFA, 0x00, 0x00, 0x54, 0x5E, 0x04, 0x10, 0x00, 0x00, 0x56, 0x6E, 0x04, 0x11, 0x00, 0x00,
            0x58, 0xCE, 0x04, 0x12, 0x00, 0x00, 0x5B, 0x82, 0x04, 0x13, 0x00, 0x00, 0x5E, 0x7E, 0x04, 0x14, 0x00, 0x00,
            0x60, 0x48, 0x04, 0x15, 0x00, 0x00, 0x63, 0x2C, 0x04, 0x16, 0x00, 0x00, 0x65, 0x86, 0x04, 0x17, 0x00, 0x00,
            0x68, 0x5C, 0x04, 0x18, 0x00, 0x00, 0x6B, 0x32, 0x04, 0x19, 0x00, 0x00, 0x6D, 0x62, 0x04, 0x1A, 0x00, 0x00,
            0x70, 0x9C, 0x04, 0x1B, 0x00, 0x00, 0x72, 0xE8, 0x04, 0x1C, 0x00, 0x00, 0x74, 0xEA, 0x04, 0x1D, 0x00, 0x00,
            0x78, 0x1C, 0x04, 0x1E, 0x00, 0x00, 0x7A, 0x4E, 0x04, 0x1F, 0x00, 0x00, 0x7C, 0xC0, 0x04, 0x20, 0x00, 0x00,
            0x7E, 0xAA, 0x04, 0x21, 0x00, 0x00, 0x81, 0x2A, 0x04, 0x22, 0x00, 0x00, 0x83, 0x98, 0x04, 0x23, 0x00, 0x00,
            0x85, 0x78, 0x04, 0x24, 0x00, 0x00, 0x87, 0xC0, 0x04, 0x25, 0x00, 0x00, 0x8A, 0xBE, 0x04, 0x26, 0x00, 0x00,
            0x8D, 0x18, 0x04, 0x27, 0x00, 0x00, 0x8F, 0x94, 0x04, 0x28, 0x00, 0x00, 0x91, 0x9A, 0x04, 0x29, 0x00, 0x00,
            0x94, 0x70, 0x04, 0x2A, 0x00, 0x00, 0x97, 0x8E, 0x04, 0x2B, 0x00, 0x00, 0x9A, 0x1E, 0x04, 0x2C, 0x00, 0x00,
            0x9D, 0x0E, 0x04, 0x2D, 0x00, 0x00, 0x9F, 0x8A, 0x04, 0x2E, 0x00, 0x00, 0xA2, 0x60, 0x04, 0x2F, 0x00, 0x00,
            0xA5, 0xA4, 0x04, 0x30, 0x00, 0x00, 0xA8, 0x1C, 0x04, 0x31, 0x00, 0x00, 0xAA, 0x80, 0x04, 0x32, 0x00, 0x00,
            0xAD, 0x5A, 0x04, 0x33, 0x00, 0x00, 0xAF, 0xBE, 0x04, 0x34, 0x00, 0x00, 0xB1, 0x44, 0x04, 0x35, 0x00, 0x00,
            0xB3, 0xE0, 0x04, 0x36, 0x00, 0x00, 0xB6, 0x24, 0x04, 0x37, 0x00, 0x00, 0xB8, 0x8C, 0x04, 0x38, 0x00, 0x00,
            0xBB, 0x0E, 0x04, 0x39, 0x00, 0x00, 0xBC, 0xF4, 0x04, 0x3A, 0x00, 0x00, 0xBF, 0xAC, 0x04, 0x3B, 0x00, 0x00,
            0xC1, 0xA6, 0x04, 0x3C, 0x00, 0x00, 0xC3, 0xBE, 0x04, 0x3D, 0x00, 0x00, 0xC6, 0x3C, 0x04, 0x3E, 0x00, 0x00,
            0xC8, 0x1C, 0x04, 0x3F, 0x00, 0x00, 0xCA, 0x60, 0x04, 0x40, 0x00, 0x00, 0xCC, 0x50, 0x04, 0x41, 0x00, 0x00,
            0xCE, 0xB4, 0x04, 0x42, 0x00, 0x00, 0xD0, 0xCA, 0x04, 0x43, 0x00, 0x00, 0xD2, 0x74, 0x04, 0x44, 0x00, 0x00,
            0xD4, 0xA2, 0x04, 0x45, 0x00, 0x00, 0xD7, 0xC8, 0x04, 0x46, 0x00, 0x00, 0xD9, 0xDA, 0x04, 0x47, 0x00, 0x00,
            0xDC, 0x14, 0x04, 0x48, 0x00, 0x00, 0xDD, 0xD4, 0x04, 0x49, 0x00, 0x00, 0xE0, 0x54, 0x04, 0x4A, 0x00, 0x00,
            0xE3, 0x14, 0x04, 0x4B, 0x00, 0x00, 0xE5, 0x50, 0x04, 0x4C, 0x00, 0x00, 0xE7, 0xBE, 0x04, 0x4D, 0x00, 0x00,
            0xE9, 0xCE, 0x04, 0x4E, 0x00, 0x00, 0xEC, 0x38, 0x04, 0x4F, 0x00, 0x00, 0xEE, 0xEC, 0x20, 0x19, 0x00, 0x00,
            0xF1, 0x30,
        ];
        let chars = read_character_offsets(&mut &data[..]).unwrap();
        assert_eq!(
            chars,
            vec![
                ('\u{8}', 0),
                (' ', 136),
                ('!', 272),
                ('&', 680),
                ('0', 1532),
                ('1', 2164),
                ('2', 2598),
                ('3', 3196),
                ('4', 3878),
                ('5', 4438),
                ('6', 5128),
                ('7', 5844),
                ('8', 6356),
                ('9', 7098),
                ('?', 7836),
                ('@', 8374),
                ('Æ', 9594),
                ('Ñ', 10438),
                ('Ø', 11162),
                ('ß', 12010),
                ('à', 12818),
                ('á', 13528),
                ('æ', 14226),
                ('ç', 15114),
                ('è', 15788),
                ('é', 16456),
                ('ê', 17172),
                ('ë', 17894),
                ('í', 18664),
                ('ñ', 19038),
                ('ó', 19702),
                ('ø', 20308),
                ('ù', 21044),
                ('ú', 21598),
                ('А', 22126),
                ('Б', 22734),
                ('В', 23426),
                ('Г', 24190),
                ('Д', 24648),
                ('Е', 25388),
                ('Ж', 25990),
                ('З', 26716),
                ('И', 27442),
                ('Й', 28002),
                ('К', 28828),
                ('Л', 29416),
                ('М', 29930),
                ('Н', 30748),
                ('О', 31310),
                ('П', 31936),
                ('Р', 32426),
                ('С', 33066),
                ('Т', 33688),
                ('У', 34168),
                ('Ф', 34752),
                ('Х', 35518),
                ('Ц', 36120),
                ('Ч', 36756),
                ('Ш', 37274),
                ('Щ', 38000),
                ('Ъ', 38798),
                ('Ы', 39454),
                ('Ь', 40206),
                ('Э', 40842),
                ('Ю', 41568),
                ('Я', 42404),
                ('а', 43036),
                ('б', 43648),
                ('в', 44378),
                ('г', 44990),
                ('д', 45380),
                ('е', 46048),
                ('ж', 46628),
                ('з', 47244),
                ('и', 47886),
                ('й', 48372),
                ('к', 49068),
                ('л', 49574),
                ('м', 50110),
                ('н', 50748),
                ('о', 51228),
                ('п', 51808),
                ('р', 52304),
                ('с', 52916),
                ('т', 53450),
                ('у', 53876),
                ('ф', 54434),
                ('х', 55240),
                ('ц', 55770),
                ('ч', 56340),
                ('ш', 56788),
                ('щ', 57428),
                ('ъ', 58132),
                ('ы', 58704),
                ('ь', 59326),
                ('э', 59854),
                ('ю', 60472),
                ('я', 61164),
                ('’', 61744)
            ]
        )
    }

    #[test]
    fn test_read_character_offsets_hiragana_1() {
        // Microsoft Sans Serif_R_S_H1_10.vf3  StartOffset(h): 0000008A, EndOffset(h): 0000020B, Length(h):
        // 00000182
        let data: [u8; 0x182] = [
            0x00, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x88, 0x00, 0x30, 0x00, 0x00,
            0x01, 0x10, 0x00, 0x31, 0x00, 0x00, 0x03, 0x88, 0x00, 0x32, 0x00, 0x00, 0x05, 0x3A, 0x00, 0x33, 0x00, 0x00,
            0x07, 0x90, 0x00, 0x34, 0x00, 0x00, 0x0A, 0x3A, 0x00, 0x35, 0x00, 0x00, 0x0C, 0x6A, 0x00, 0x36, 0x00, 0x00,
            0x0F, 0x1C, 0x00, 0x37, 0x00, 0x00, 0x11, 0xE8, 0x00, 0x38, 0x00, 0x00, 0x13, 0xE8, 0x00, 0x39, 0x00, 0x00,
            0x16, 0xCE, 0x30, 0x42, 0x00, 0x00, 0x19, 0xB0, 0x30, 0x44, 0x00, 0x00, 0x1D, 0xC0, 0x30, 0x46, 0x00, 0x00,
            0x20, 0x1C, 0x30, 0x48, 0x00, 0x00, 0x22, 0x4C, 0x30, 0x4A, 0x00, 0x00, 0x24, 0xEA, 0x30, 0x4B, 0x00, 0x00,
            0x28, 0x60, 0x30, 0x4D, 0x00, 0x00, 0x2B, 0x7E, 0x30, 0x4F, 0x00, 0x00, 0x2E, 0xD6, 0x30, 0x51, 0x00, 0x00,
            0x30, 0x96, 0x30, 0x53, 0x00, 0x00, 0x32, 0xF4, 0x30, 0x55, 0x00, 0x00, 0x34, 0xE0, 0x30, 0x57, 0x00, 0x00,
            0x37, 0xB6, 0x30, 0x59, 0x00, 0x00, 0x39, 0xB8, 0x30, 0x5B, 0x00, 0x00, 0x3C, 0xC8, 0x30, 0x5D, 0x00, 0x00,
            0x3F, 0xF8, 0x30, 0x5F, 0x00, 0x00, 0x42, 0xA0, 0x30, 0x61, 0x00, 0x00, 0x45, 0x9C, 0x30, 0x63, 0x00, 0x00,
            0x48, 0x4A, 0x30, 0x64, 0x00, 0x00, 0x4A, 0x4A, 0x30, 0x66, 0x00, 0x00, 0x4C, 0x96, 0x30, 0x68, 0x00, 0x00,
            0x4E, 0xD4, 0x30, 0x6A, 0x00, 0x00, 0x51, 0x10, 0x30, 0x6B, 0x00, 0x00, 0x54, 0x48, 0x30, 0x6C, 0x00, 0x00,
            0x56, 0xEA, 0x30, 0x6D, 0x00, 0x00, 0x5B, 0x90, 0x30, 0x6E, 0x00, 0x00, 0x5F, 0x1C, 0x30, 0x6F, 0x00, 0x00,
            0x61, 0xE0, 0x30, 0x72, 0x00, 0x00, 0x65, 0x74, 0x30, 0x75, 0x00, 0x00, 0x68, 0xAE, 0x30, 0x78, 0x00, 0x00,
            0x6B, 0x8C, 0x30, 0x7B, 0x00, 0x00, 0x6D, 0x46, 0x30, 0x7E, 0x00, 0x00, 0x70, 0xCE, 0x30, 0x7F, 0x00, 0x00,
            0x74, 0x5E, 0x30, 0x80, 0x00, 0x00, 0x77, 0xE8, 0x30, 0x81, 0x00, 0x00, 0x7B, 0x5A, 0x30, 0x82, 0x00, 0x00,
            0x7F, 0x4E, 0x30, 0x83, 0x00, 0x00, 0x82, 0x14, 0x30, 0x84, 0x00, 0x00, 0x84, 0xD4, 0x30, 0x85, 0x00, 0x00,
            0x87, 0xEA, 0x30, 0x86, 0x00, 0x00, 0x8A, 0xDA, 0x30, 0x87, 0x00, 0x00, 0x8E, 0x36, 0x30, 0x88, 0x00, 0x00,
            0x90, 0x84, 0x30, 0x89, 0x00, 0x00, 0x93, 0x66, 0x30, 0x8A, 0x00, 0x00, 0x95, 0xE0, 0x30, 0x8B, 0x00, 0x00,
            0x98, 0x78, 0x30, 0x8C, 0x00, 0x00, 0x9B, 0xCC, 0x30, 0x8D, 0x00, 0x00, 0x9F, 0x6A, 0x30, 0x8F, 0x00, 0x00,
            0xA2, 0x18, 0x30, 0x92, 0x00, 0x00, 0xA5, 0x12, 0x30, 0x93, 0x00, 0x00, 0xA8, 0x48, 0x30, 0x9B, 0x00, 0x00,
            0xAB, 0x5C, 0x30, 0x9C, 0x00, 0x00, 0xAC, 0xAE,
        ];
        let chars = read_character_offsets(&mut &data[..]).unwrap();
        assert_eq!(
            chars,
            vec![
                ('\u{8}', 0),
                (' ', 136),
                ('0', 272),
                ('1', 904),
                ('2', 1338),
                ('3', 1936),
                ('4', 2618),
                ('5', 3178),
                ('6', 3868),
                ('7', 4584),
                ('8', 5096),
                ('9', 5838),
                ('あ', 6576),
                ('い', 7616),
                ('う', 8220),
                ('え', 8780),
                ('お', 9450),
                ('か', 10336),
                ('き', 11134),
                ('く', 11990),
                ('け', 12438),
                ('こ', 13044),
                ('さ', 13536),
                ('し', 14262),
                ('す', 14776),
                ('せ', 15560),
                ('そ', 16376),
                ('た', 17056),
                ('ち', 17820),
                ('っ', 18506),
                ('つ', 19018),
                ('て', 19606),
                ('と', 20180),
                ('な', 20752),
                ('に', 21576),
                ('ぬ', 22250),
                ('ね', 23440),
                ('の', 24348),
                ('は', 25056),
                ('ひ', 25972),
                ('ふ', 26798),
                ('へ', 27532),
                ('ほ', 27974),
                ('ま', 28878),
                ('み', 29790),
                ('む', 30696),
                ('め', 31578),
                ('も', 32590),
                ('ゃ', 33300),
                ('や', 34004),
                ('ゅ', 34794),
                ('ゆ', 35546),
                ('ょ', 36406),
                ('よ', 36996),
                ('ら', 37734),
                ('り', 38368),
                ('る', 39032),
                ('れ', 39884),
                ('ろ', 40810),
                ('わ', 41496),
                ('を', 42258),
                ('ん', 43080),
                ('゛', 43868),
                ('゜', 44206)
            ]
        )
    }
}
